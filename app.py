import contextlib
import requests
import datetime
import json
import asyncio
import logging
from aiogram import Dispatcher
from aiohttp import ClientTimeout

dp = Dispatcher()

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command, ChatMemberUpdatedFilter, IS_NOT_MEMBER, IS_MEMBER, CommandObject, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import BufferedInputFile
import os
import backoff
import aiohttp
from dotenv import load_dotenv
from typing import Dict, Any, TypedDict, List, Optional
import csv
from io import StringIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


# –¢–∏–ø–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
class UserContext(TypedDict):
    messages: List[Dict[str, str]]
    message_count: int
    last_active: str
    banned: bool


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
game_context: Dict[int, UserContext] = {}
admin_context = {}
logs_buffer = []

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
logger.info("Loading environment variables")
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = os.getenv("API_URL")
API_KEY = os.getenv("API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

if not all([BOT_TOKEN, API_URL, API_KEY, ADMIN_ID]):
    logger.critical("Missing required environment variables")
    raise ValueError("Missing required environment variables")

logger.info(f"Admin ID configured as: {ADMIN_ID}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
router = Router(name="main")
logger.info("Initializing bot with configurations")
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    session_timeout=300,  # 5 –º–∏–Ω—É—Ç
    read_timeout=300,  # 5 –º–∏–Ω—É—Ç
    connect_timeout=60  # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
)


class APIClient:
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è API –∫–ª–∏–µ–Ω—Ç–∞
        self.timeout = ClientTimeout(
            total=300,  # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç
            connect=60,  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            sock_read=600,  # 4 –º–∏–Ω—É—Ç—ã –Ω–∞ —á—Ç–µ–Ω–∏–µ
            sock_connect=30  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–∫–µ—Ç–∞
        )

    @backoff.on_exception(
        backoff.expo,
        (aiohttp.ClientError, asyncio.TimeoutError),
        max_tries=3,
        max_time=300,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        giveup=lambda e: isinstance(e, aiohttp.ClientResponseError) and e.status == 429
    )
    async def ensure_session(self):
        if self.session is None:
            import aiohttp
            self.session = aiohttp.ClientSession()
        return self.session

    async def make_request(self, data: Dict[str, Any]) -> Dict[str, Any]:
        session = await self.ensure_session()
        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json"
        }

        try:
            async with session.post(API_URL, json=data, headers=headers, timeout=self.timeout) as response:
                response.raise_for_status()
                return await response.json()
        except aiohttp.ClientResponseError as e:
            if e.status == 401:
                logger.error("Unauthorized: Check your API_KEY")
            raise

    async def close(self):
        if self.session and not self.session.closed:
            await self.session.close()

    def __del__(self):
        if self.session and not self.session.closed:
            asyncio.create_task(self.session.close())

async def maintain_typing_status(chat_id: int, stop_event: asyncio.Event):
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—á–∞—Ç–∞–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
    logger.debug(f"Starting typing status for chat_id: {chat_id}")
    try:
        while not stop_event.is_set():
            await bot.send_chat_action(chat_id, "typing")
            await asyncio.sleep(4.9)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, —á—É—Ç—å –º–µ–Ω—å—à–µ 5 —Å–µ–∫—É–Ω–¥
    except Exception as e:
        logger.error(f"Error in typing status: {e}")
    finally:
        logger.debug(f"Stopping typing status for chat_id: {chat_id}")


async def get_ai_response(user_id: int, question: str, chat_id: int) -> str:
    api_client = APIClient()
    user_data = game_context.setdefault(user_id, init_user_context())

    if user_data["banned"]:
        return "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–∞–∫—É–ª—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"

    messages = user_data["messages"][-4:] + [{"role": "user", "content": safe_slice(question, 2000)}]
    data = {
        "messages": messages,
        "model": "deepseek-ai/DeepSeek-V3",
        "max_tokens": 1024,
        "temperature": 0.4,
        "top_p": 0.9
    }

    stop_typing = asyncio.Event()
    typing_task = asyncio.create_task(maintain_typing_status(chat_id, stop_typing))

    try:
        for attempt in range(3):
            try:
                response_data = await api_client.make_request(data)
                if not isinstance(response_data.get("choices"), list) or not response_data["choices"]:
                    raise ValueError("Invalid API response structure")

                content = response_data["choices"][0].get("message", {}).get("content", "")
                sanitized_response = safe_slice(content.replace('\0', ''), 4000)

                user_data.update({
                    "messages": messages + [{"role": "assistant", "content": sanitized_response}],
                    "message_count": user_data["message_count"] + 1,
                    "last_active": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                })
                game_context[user_id] = user_data

                return sanitized_response

            except aiohttp.ClientResponseError as e:
                if e.status == 429:
                    wait_time = min(2 ** attempt * 30, 240)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    logger.warning(f"Rate limit exceeded, waiting {wait_time}s")
                    await asyncio.sleep(wait_time)
                    continue
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ({e.status}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            except asyncio.TimeoutError:
                if attempt < 2:
                    wait_time = min(2 ** attempt * 30, 240)
                    logger.warning(f"Request timeout, attempt {attempt + 1}/3, waiting {wait_time}s")
                    await asyncio.sleep(wait_time)
                    continue
                return "‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    finally:
        stop_typing.set()
        try:
            await asyncio.wait_for(typing_task, timeout=10)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ typing
        except asyncio.TimeoutError:
            typing_task.cancel()


# Add to main() function:
async def cleanup():
    """Cleanup function to close the API client session"""
    await api_client.close()


async def main():
    try:
        dp.include_router(router)
        await dp.start_polling(bot)
    finally:
        await cleanup()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def safe_slice(data: Any, max_len: int, default: str = "") -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—Ä–µ–∑ –¥–ª—è –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        return str(data)[:max_len]
    except Exception:
        return default[:max_len]


def init_user_context() -> UserContext:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return {
        "messages": [],
        "message_count": 0,
        "last_active": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "banned": False
    }


async def maintain_typing_status(chat_id: int, stop_event: asyncio.Event):
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
    logger.debug(f"Starting typing status for chat_id: {chat_id}")
    try:
        while not stop_event.is_set():
            await bot.send_chat_action(chat_id, "typing")
            await asyncio.sleep(4)
    except Exception as e:
        logger.error(f"Error in typing status: {e}")
    finally:
        logger.debug(f"Stopping typing status for chat_id: {chat_id}")


@router.message(Command(commands=["start", "help", "menu"]))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ä—Ç–∞"""
    menu_text = (
        "üìú <b>–°–≤–∏—Ç–æ–∫ –ö–æ–º–∞–Ω–¥:</b>\n\n"
        "/oracle - üîÆ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –û—Ä–∞–∫—É–ª–æ–º\n"
        "/–∞–Ω–∞–ª–∏–∑ - üìä –ê–Ω–∞–ª–∏–∑ –ª—é–±–æ–π —Ç–µ–º—ã\n"
        "/—ç–º–æ—Ü–∏–∏ - üåå –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥\n"
        "/–∞—Ä—Ç–µ—Ñ–∞–∫—Ç - üè∫ –°–≤–æ–π—Å—Ç–≤–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞\n"
        "/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ - üå† –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ"
    )

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üåÄ –ê–Ω–∞–ª–∏–∑", callback_data="cmd_analysis"),
        InlineKeyboardButton(text="üåå –≠–º–æ—Ü–∏–∏", callback_data="cmd_emotions")
    )
    builder.row(
        InlineKeyboardButton(text="üíé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", callback_data="cmd_artifacts"),
        InlineKeyboardButton(text="üå™ –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞", callback_data="cmd_prophecy")
    )

    await message.answer(menu_text, reply_markup=builder.as_markup())
#
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.startswith("cmd_"))
async def handle_menu_buttons(callback: CallbackQuery):
    action = callback.data.split("_")[1]

    instructions = {
        "analysis": "üåÄ –í–≤–µ–¥–∏—Ç–µ /–∞–Ω–∞–ª–∏–∑ [—Ç–µ–º–∞] –¥–ª—è –≥–ª—É–±–∏–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
        "emotions": "üåå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—ç–º–æ—Ü–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ–ª—è",
        "signs": "üå† –í–≤–µ–¥–∏—Ç–µ /–∑–Ω–∞–∫ [–Ω–∞–∑–≤–∞–Ω–∏–µ] –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–∏–º–≤–æ–ª–∞",
        "artifacts": "üíé –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∞—Ä—Ç–µ—Ñ–∞–∫—Ç [–Ω–∞–∑–≤–∞–Ω–∏–µ] –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        "prophecy": "üå™ –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
        "oracle": "üîÆ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –û—Ä–∞–∫—É–ª–æ–º"
    }

    await callback.answer()
    await callback.message.answer(
        f"‚ö° <b>{instructions[action]}</b>",
        parse_mode=ParseMode.HTML
    )


@router.message(Command("oracle"))
async def cmd_oracle(message: Message, command: CommandObject):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /oracle —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
    if not command.args:
        await message.answer("üîÆ –Ø –∑–¥–µ—Å—å! –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/oracle –∫–∞–∫ –ø—Ä–æ–π–¥–µ—Ç –º–æ–π –¥–µ–Ω—å?")
        return

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å typing —Å—Ç–∞—Ç—É—Å–æ–º
    stop_typing = asyncio.Event()
    typing_task = asyncio.create_task(maintain_typing_status(message.chat.id, stop_typing))

    try:
        response = await get_ai_response(
            message.from_user.id,
            command.args,
            message.chat.id
        )
        await message.reply(f"üîÆ –û—Ç–≤–µ—Ç –û—Ä–∞–∫—É–ª–∞:\n\n{response}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º typing —Å—Ç–∞—Ç—É—Å
        stop_typing.set()
        await typing_task

@router.message(Command("–∞–Ω–∞–ª–∏–∑"))
async def cmd_analysis(message: Message, command: CommandObject):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–∞–Ω–∞–ª–∏–∑ [—Ç–µ–º–∞]"""
    logger.info(f"Analysis command received from user {message.from_user.id}")

    if not command.args:
        logger.warning(f"No analysis topic provided by user {message.from_user.id}")
        await message.answer("üåÄ –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/–∞–Ω–∞–ª–∏–∑ —Å—É–¥—å–±–∞ –º–∏—Ä–∞")
        return

    try:
        logger.info(f"Getting analysis for topic: {command.args}")
        response = await get_ai_response(
            message.from_user.id,
            f"–°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–µ: {command.args}. –í—ã—è–≤–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏, —Ç—Ä–µ–Ω–¥—ã –∏ —Å–≤—è–∑–∏.",
            message.chat.id
        )

        if response:
            logger.info(f"Analysis response received for user {message.from_user.id}")
            await message.reply(f"üåÄ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –ø–æ —Ç–µ–º–µ '{command.args}':\n\n{response}")
        else:
            logger.error(f"Empty analysis response for user {message.from_user.id}")
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error in analysis command: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞")



@router.message(Command("—ç–º–æ—Ü–∏–∏"))
async def cmd_emotions(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /—ç–º–æ—Ü–∏–∏"""
    response = await get_ai_response(
        message.from_user.id,
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â—É—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –£—á—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        message.chat.id
    )
    await message.reply(f"üåå –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n{response}")

@router.message(Command("–∑–Ω–∞–∫"))
async def cmd_sign(message: Message, command: CommandObject):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–∑–Ω–∞–∫ [–Ω–∞–∑–≤–∞–Ω–∏–µ]"""
    if not command.args:
        await message.answer("üå† –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/–∑–Ω–∞–∫ —Å–∫–æ—Ä–ø–∏–æ–Ω")
        return

    response = await get_ai_response(
        message.from_user.id,
        f"–û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤–ª–∏—è–Ω–∏–µ –∑–Ω–∞–∫–∞: {command.args}. –î–æ–±–∞–≤—å –º–∏—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.",
        message.chat.id
    )
    await message.reply(f"üå† –¢–∞–π–Ω–∞ –∑–Ω–∞–∫–∞ '{command.args}':\n\n{response}")

@router.message(Command("–∞—Ä—Ç–µ—Ñ–∞–∫—Ç"))
async def cmd_artifact(message: Message, command: CommandObject):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–∞—Ä—Ç–µ—Ñ–∞–∫—Ç [–Ω–∞–∑–≤–∞–Ω–∏–µ]"""
    if not command.args:
        await message.answer("üíé –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/–∞—Ä—Ç–µ—Ñ–∞–∫—Ç –º–µ—á —Å—É–¥—å–±—ã")
        return

    response = await get_ai_response(
        message.from_user.id,
        f"–û–ø–∏—à–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞: {command.args}. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –∏–≥—Ä–µ - –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é.",
        message.chat.id
    )
    await message.reply(f"üíä –¢–∞–π–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ '{command.args}':\n\n{response}")

@router.message(Command("–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"))
async def cmd_prophecy(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
    response = await get_ai_response(
        message.from_user.id,
        "–î–∞–π —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –∞—Ä—Ö–µ—Ç–∏–ø—ã.",
        message.chat.id
    )
    await message.reply(f"üå™ –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–µ–π—á–∞—Å:\n\n{response}")


@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return  # –Ø–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤–º–µ—Å—Ç–æ –Ω–µ—è–≤–Ω–æ–≥–æ

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    active_users = sum(1 for u in game_context.values() if u.get('last_active'))
    banned_users = sum(1 for u in game_context.values() if u.get('banned', False))

    stats = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(game_context)}\n"
        f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {active_users}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {banned_users}"
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        InlineKeyboardButton(text="üìù –õ–æ–≥–∏", callback_data="admin_logs")
    )
    builder.row(
        InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫", callback_data="admin_search"),
        InlineKeyboardButton(text="üì¶ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export")
    )
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")
    )

    await message.answer(
        stats,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data.startswith("admin_"))
async def handle_admin_actions(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    action = callback.data.split("_")[1]

    if action == "broadcast":
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await state.set_state("admin_broadcast_text")

    elif action == "logs":
        log_file = StringIO()
        log_file.write("\n".join(logs_buffer[-100:]))
        log_file.seek(0)
        await callback.message.answer_document(
            document=BufferedInputFile(log_file.read().encode(), filename="logs.txt"))

    elif action == "export":
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞
        csv_file = StringIO()
        writer = csv.writer(csv_file)
        writer.writerow(["ID", "Last Active", "Messages", "Banned"])

        for user_id, data in game_context.items():
            writer.writerow([
                user_id,
                data.get('last_active', 'N/A'),
                data.get('message_count', 0),
                data.get('banned', False)
            ])

        csv_file.seek(0)
        await callback.message.answer_document(
            document=BufferedInputFile(csv_file.read().encode(), filename="users_export.csv")
        )

    elif action == "search":
        await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–º—è:")
        await state.set_state("admin_search_user")

    await callback.answer()


@router.message(F.text, StateFilter("admin_broadcast_text"))
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    success = 0
    failed = 0

    for user_id in game_context:
        try:
            await bot.send_message(user_id, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{message.text}")
            success += 1
        except Exception as e:
            failed += 1
            logs_buffer.append(f"Failed to send to {user_id}: {str(e)}")

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )
    await state.clear()


@router.message(F.text, StateFilter("admin_search_user"))
async def process_user_search(message: Message):
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    search_query = message.text.lower()
    found_users = []

    for user_id, data in game_context.items():
        user = await bot.get_chat(user_id)
        if (search_query in str(user_id) or
                search_query in user.first_name.lower() or
                search_query in (user.last_name or "").lower()):
            found_users.append(
                f"üë§ {user.first_name} {user.last_name or ''}\n"
                f"üÜî ID: {user_id}\n"
                f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data.get('last_active', 'N/A')}\n"
                f"üì© –°–æ–æ–±—â–µ–Ω–∏–π: {data.get('message_count', 0)}\n"
                f"üö´ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if data.get('banned') else '–ê–∫—Ç–∏–≤–µ–Ω'}"
            )

    response = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n" + "\n\n".join(found_users[:5]) if found_users else "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    await message.answer(response)




@router.message(Command("ban"))
async def ban_user(message: Message, command: CommandObject):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø!")
        return

    try:
        user_id = int(command.args)
        if user_id not in game_context:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        game_context[user_id]['banned'] = True
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {Code(str(user_id))} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", parse_mode=ParseMode.HTML)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü—Ä–∏–º–µ—Ä: /ban 123456789")


@router.message(Command("unban"))
async def unban_user(message: Message, command: CommandObject):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        user_id = int(command.args)
        game_context[user_id]['banned'] = False
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    except:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")


# –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
@router.message(F.text & ~F.text.startswith('/'))
async def handle_general_message(message: Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    user_data = game_context.get(message.from_user.id, {})
    if user_data.get('banned'):
        await message.answer("üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–∞–∫—É–ª—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return

@router.callback_query(F.data == "refresh_stats")
async def refresh_stats(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(game_context)}"
    await callback.message.edit_text(stats)

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π get_ai_response

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())