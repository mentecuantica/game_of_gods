import requests
import datetime
import asyncio
import json
import logging
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command, ChatMemberUpdatedFilter, IS_NOT_MEMBER, IS_MEMBER
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ["BOT_TOKEN"]
API_URL = os.environ["API_URL"]
API_KEY = os.environ["API_KEY"]
ADMIN_ID = int(os.environ["ADMIN_ID"])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
router = Router(name="main")
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–≥—Ä—ã
game_context = {}

@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != ADMIN_ID:
        return

    stats = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(game_context)}"

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_stats"),
        InlineKeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")
    )

    await message.answer(stats, reply_markup=builder.as_markup())



async def get_ai_response(user_id: int, question: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI API"""
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_KEY}"
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    messages = game_context.get(user_id, [])
    messages.append({"role": "user", "content": question})

    data = {
        "messages": messages,
        "model": "deepseek-ai/DeepSeek-V3",
        "max_tokens": 512,
        "temperature": 0.1,
        "top_p": 0.9
    }

    try:
        response = requests.post(API_URL, headers=headers, json=data)
        response.raise_for_status()
        ai_response = response.json()['choices'][0]['message']['content']

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π)
        messages.append({"role": "assistant", "content": ai_response})
        game_context[user_id] = messages[-5:]

        return ai_response
    except Exception as e:
        logging.error(f"API Error: {e}")
        return "‚ö†Ô∏è –û—Ä–∞–∫—É–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


@router.message(Command(commands=["start", "help"]))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç"""
    # builder = InlineKeyboardBuilder()
    # builder.add(InlineKeyboardButton(
    #     text="üåÄ –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç–∞–ª",
    #     web_app=WebAppInfo(url="https://your-game-webapp.com/")
    # ))

    await message.answer(
        "üõ°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–≥—Ä—É –ë–æ–≥–æ–≤!\n\n"
        "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ—Ä–∞–∫—É–ª—É –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç–∞–ª –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:",

    )


@router.message(F.text)
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø –±–µ–∑ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
    if message.chat.type != 'private':
        if not message.text.startswith('/oracle'):
            return
        question = message.text.replace('/oracle', '').strip()
    else:
        question = message.text

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_chat_action(message.chat.id, "typing")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    response = await get_ai_response(user_id, question)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    formatted_response = f"üîÆ –û—Ä–∞–∫—É–ª –ø—Ä–æ–≤–∏–¥–∏—Ç:\n\n{response}"
    await message.reply(formatted_response)


@router.callback_query(F.data == "refresh_stats")
async def refresh_stats(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(game_context)}"
    await callback.message.edit_text(stats)


async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())