import requests
import datetime
import asyncio
import json
import logging
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command, ChatMemberUpdatedFilter, IS_NOT_MEMBER, IS_MEMBER, CommandObject, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.formatting import Bold, Code
from aiogram.types import BufferedInputFile  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
import os

from dotenv import load_dotenv
# –î–æ–±–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
from typing import Dict, Any

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import csv
from io import StringIO

# –û–±–Ω–æ–≤–∏–º game_context –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
game_context: Dict[int, Dict[str, Any]] = {}
admin_context = {}
logs_buffer = []
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = os.getenv("API_URL")
API_KEY = os.getenv("API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
print(ADMIN_ID)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
from aiogram.client.default import DefaultBotProperties

router = Router(name="main")
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    session_timeout=60,
    read_timeout=30,
    connect_timeout=30
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
game_context = {}



async def maintain_typing_status(chat_id: int, stop_event: asyncio.Event):
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—á–∞—Ç–∞–Ω–∏—è –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    while not stop_event.is_set():
        await bot.send_chat_action(chat_id, "typing")
        await asyncio.sleep(4)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã


async def get_ai_response(user_id: int, question: str, chat_id: int) -> str:
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_KEY}"
    }

    messages = game_context.get(user_id, [])
    messages.append({"role": "user", "content": question})

    data = {
        "messages": messages,
        "model": "deepseek-ai/DeepSeek-V3",
        "max_tokens": 222,
        "temperature": 0.1,
        "top_p": 0.9
    }

    stop_typing = asyncio.Event()
    typing_task = asyncio.create_task(maintain_typing_status(chat_id, stop_typing))

    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è requests
        response = await asyncio.to_thread(
            lambda: requests.post(
                API_URL,
                headers=headers,
                json=data,
                timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
            )
        )
        response.raise_for_status()
        ai_response = response.json()['choices'][0]['message']['content']

        messages.append({"role": "assistant", "content": ai_response})
        game_context[user_id] = messages[-5:]

        return ai_response
    except requests.exceptions.Timeout:
        logging.error("API request timed out")
        return "‚ö†Ô∏è –û—Ä–∞–∫—É–ª –∑–∞–¥—É–º–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –Ω–∞–¥–æ–ª–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."
    except requests.exceptions.RequestException as e:
        logging.error(f"API Error: {e}")
        return "‚ö†Ô∏è –û—Ä–∞–∫—É–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    finally:
        stop_typing.set()
        await typing_task


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start/help
@router.message(Command(commands=["start", "help", "menu"]))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ä—Ç–∞ –∏ –º–µ–Ω—é"""
    menu_text = (
        "üìú <b>–°–≤—è—â–µ–Ω–Ω—ã–π –°–≤–∏—Ç–æ–∫ –ö–æ–º–∞–Ω–¥:</b>\n\n"
        "üîÆ /oracle - –ü—Ä–∏–∑–≤–∞—Ç—å –û—Ä–∞–∫—É–ª–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞\n"
        "üåÄ /–∞–Ω–∞–ª–∏–∑ [—Ç–µ–º–∞] - –ì–ª—É–±–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—é–±–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "üåå /—ç–º–æ—Ü–∏–∏ - –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Å—Ä–µ–∑ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∑–Ω–∞–Ω–∏—è\n"
        "üå† /–∑–Ω–∞–∫ [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –¢–∞–π–Ω—ã –∞—Å—Ç—Ä–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n"
        "üíé /–∞—Ä—Ç–µ—Ñ–∞–∫—Ç [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –°–∞–∫—Ä–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤\n"
        "üå™ /–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ - –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –Ω–∞ —Ç–µ–∫—É—â–∏–π –∫–≤–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏\n\n"
        "‚ú® <i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å - –ø–æ–ª—É—á—å –º—É–¥—Ä–æ—Å—Ç—å –í—Å–µ–ª–µ–Ω–Ω–æ–π</i>"
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üåÄ –ê–Ω–∞–ª–∏–∑", callback_data="cmd_analysis"),
        InlineKeyboardButton(text="üåå –≠–º–æ—Ü–∏–∏", callback_data="cmd_emotions"),
        InlineKeyboardButton(text="üå† –ó–Ω–∞–∫–∏", callback_data="cmd_signs")
    )
    builder.row(
        InlineKeyboardButton(text="üíé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", callback_data="cmd_artifacts"),
        InlineKeyboardButton(text="üå™ –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞", callback_data="cmd_prophecy"),
        InlineKeyboardButton(text="üîÆ –û—Ä–∞–∫—É–ª", callback_data="cmd_oracle")
    )

    await message.answer(
        menu_text,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.startswith("cmd_"))
async def handle_menu_buttons(callback: CallbackQuery):
    action = callback.data.split("_")[1]

    instructions = {
        "analysis": "üåÄ –í–≤–µ–¥–∏—Ç–µ /–∞–Ω–∞–ª–∏–∑ [—Ç–µ–º–∞] –¥–ª—è –≥–ª—É–±–∏–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
        "emotions": "üåå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—ç–º–æ—Ü–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ–ª—è",
        "signs": "üå† –í–≤–µ–¥–∏—Ç–µ /–∑–Ω–∞–∫ [–Ω–∞–∑–≤–∞–Ω–∏–µ] –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–∏–º–≤–æ–ª–∞",
        "artifacts": "üíé –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∞—Ä—Ç–µ—Ñ–∞–∫—Ç [–Ω–∞–∑–≤–∞–Ω–∏–µ] –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        "prophecy": "üå™ –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
        "oracle": "üîÆ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –û—Ä–∞–∫—É–ª–æ–º"
    }

    await callback.answer()
    await callback.message.answer(
        f"‚ö° <b>{instructions[action]}</b>",
        parse_mode=ParseMode.HTML
    )

@router.message(Command("oracle"))
async def cmd_oracle(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /oracle"""
    await message.answer("üîÆ –Ø –∑–¥–µ—Å—å! –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤—Å–µ–ª–µ–Ω–Ω–æ–π:")

@router.message(Command("–∞–Ω–∞–ª–∏–∑"))
async def cmd_analysis(message: Message, command: CommandObject):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–∞–Ω–∞–ª–∏–∑ [—Ç–µ–º–∞]"""
    if not command.args:
        await message.answer("üåÄ –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/–∞–Ω–∞–ª–∏–∑ —Å—É–¥—å–±–∞ –º–∏—Ä–∞")
        return

    response = await get_ai_response(
        message.from_user.id,
        f"–°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–µ: {command.args}. –í—ã—è–≤–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏, —Ç—Ä–µ–Ω–¥—ã –∏ —Å–≤—è–∑–∏.",
        message.chat.id
    )
    await message.reply(f"üåÄ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –ø–æ —Ç–µ–º–µ '{command.args}':\n\n{response}")

@router.message(Command("—ç–º–æ—Ü–∏–∏"))
async def cmd_emotions(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /—ç–º–æ—Ü–∏–∏"""
    response = await get_ai_response(
        message.from_user.id,
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â—É—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –£—á—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        message.chat.id
    )
    await message.reply(f"üåå –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n{response}")

@router.message(Command("–∑–Ω–∞–∫"))
async def cmd_sign(message: Message, command: CommandObject):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–∑–Ω–∞–∫ [–Ω–∞–∑–≤–∞–Ω–∏–µ]"""
    if not command.args:
        await message.answer("üå† –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/–∑–Ω–∞–∫ —Å–∫–æ—Ä–ø–∏–æ–Ω")
        return

    response = await get_ai_response(
        message.from_user.id,
        f"–û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤–ª–∏—è–Ω–∏–µ –∑–Ω–∞–∫–∞: {command.args}. –î–æ–±–∞–≤—å –º–∏—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.",
        message.chat.id
    )
    await message.reply(f"üå† –¢–∞–π–Ω–∞ –∑–Ω–∞–∫–∞ '{command.args}':\n\n{response}")

@router.message(Command("–∞—Ä—Ç–µ—Ñ–∞–∫—Ç"))
async def cmd_artifact(message: Message, command: CommandObject):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–∞—Ä—Ç–µ—Ñ–∞–∫—Ç [–Ω–∞–∑–≤–∞–Ω–∏–µ]"""
    if not command.args:
        await message.answer("üíé –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/–∞—Ä—Ç–µ—Ñ–∞–∫—Ç –º–µ—á —Å—É–¥—å–±—ã")
        return

    response = await get_ai_response(
        message.from_user.id,
        f"–û–ø–∏—à–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞: {command.args}. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –∏–≥—Ä–µ - –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é.",
        message.chat.id
    )
    await message.reply(f"üíä –¢–∞–π–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ '{command.args}':\n\n{response}")

@router.message(Command("–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"))
async def cmd_prophecy(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
    response = await get_ai_response(
        message.from_user.id,
        "–î–∞–π —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –∞—Ä—Ö–µ—Ç–∏–ø—ã.",
        message.chat.id
    )
    await message.reply(f"üå™ –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–µ–π—á–∞—Å:\n\n{response}")


@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return  # –Ø–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤–º–µ—Å—Ç–æ –Ω–µ—è–≤–Ω–æ–≥–æ

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    active_users = sum(1 for u in game_context.values() if u.get('last_active'))
    banned_users = sum(1 for u in game_context.values() if u.get('banned', False))

    stats = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(game_context)}\n"
        f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {active_users}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {banned_users}"
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        InlineKeyboardButton(text="üìù –õ–æ–≥–∏", callback_data="admin_logs")
    )
    builder.row(
        InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫", callback_data="admin_search"),
        InlineKeyboardButton(text="üì¶ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export")
    )
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")
    )

    await message.answer(
        stats,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data.startswith("admin_"))
async def handle_admin_actions(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    action = callback.data.split("_")[1]

    if action == "broadcast":
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await state.set_state("admin_broadcast_text")

    elif action == "logs":
        log_file = StringIO()
        log_file.write("\n".join(logs_buffer[-100:]))
        log_file.seek(0)
        await callback.message.answer_document(
            document=BufferedInputFile(log_file.read().encode(), filename="logs.txt"))

    elif action == "export":
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞
        csv_file = StringIO()
        writer = csv.writer(csv_file)
        writer.writerow(["ID", "Last Active", "Messages", "Banned"])

        for user_id, data in game_context.items():
            writer.writerow([
                user_id,
                data.get('last_active', 'N/A'),
                data.get('message_count', 0),
                data.get('banned', False)
            ])

        csv_file.seek(0)
        await callback.message.answer_document(
            document=BufferedInputFile(csv_file.read().encode(), filename="users_export.csv")
        )

    elif action == "search":
        await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–º—è:")
        await state.set_state("admin_search_user")

    await callback.answer()


@router.message(F.text, StateFilter("admin_broadcast_text"))
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    success = 0
    failed = 0

    for user_id in game_context:
        try:
            await bot.send_message(user_id, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{message.text}")
            success += 1
        except Exception as e:
            failed += 1
            logs_buffer.append(f"Failed to send to {user_id}: {str(e)}")

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )
    await state.clear()


@router.message(F.text, StateFilter("admin_search_user"))
async def process_user_search(message: Message):
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    search_query = message.text.lower()
    found_users = []

    for user_id, data in game_context.items():
        user = await bot.get_chat(user_id)
        if (search_query in str(user_id) or
                search_query in user.first_name.lower() or
                search_query in (user.last_name or "").lower()):
            found_users.append(
                f"üë§ {user.first_name} {user.last_name or ''}\n"
                f"üÜî ID: {user_id}\n"
                f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data.get('last_active', 'N/A')}\n"
                f"üì© –°–æ–æ–±—â–µ–Ω–∏–π: {data.get('message_count', 0)}\n"
                f"üö´ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if data.get('banned') else '–ê–∫—Ç–∏–≤–µ–Ω'}"
            )

    response = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n" + "\n\n".join(found_users[:5]) if found_users else "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    await message.answer(response)


# –û–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é get_ai_response –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def get_ai_response(user_id: int, question: str, chat_id: int) -> str:
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_data = game_context.setdefault(user_id, {
        'message_count': 0,
        'last_active': datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'banned': False
    })

    if user_data.get('banned'):
        return "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–∞–∫—É–ª—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"

    user_data['message_count'] += 1
    user_data['last_active'] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π



@router.message(Command("ban"))
async def ban_user(message: Message, command: CommandObject):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø!")
        return

    try:
        user_id = int(command.args)
        if user_id not in game_context:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        game_context[user_id]['banned'] = True
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {Code(str(user_id))} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", parse_mode=ParseMode.HTML)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü—Ä–∏–º–µ—Ä: /ban 123456789")


@router.message(Command("unban"))
async def unban_user(message: Message, command: CommandObject):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        user_id = int(command.args)
        game_context[user_id]['banned'] = False
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    except:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")


# –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
@router.message(F.text & ~F.text.startswith('/'))
async def handle_general_message(message: Message):
    user_data = game_context.get(message.from_user.id, {})

    if user_data.get('banned'):
        await message.answer("üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–∞–∫—É–ª—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return

@router.callback_query(F.data == "refresh_stats")
async def refresh_stats(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(game_context)}"
    await callback.message.edit_text(stats)

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())